#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

typedef struct Graph {
    int vertices;
    int adjMatrix[MAX_VERTICES][MAX_VERTICES];
}Graph;

void initGraph(Graph *g , int vertices){
    g->vertices = vertices;
    for(int i=0;i<vertices ;i++){
        for(int j =0;j<vertices;j++){
            g->adjMatrix[i][j]=0;
        }
    }
}

void addEdge(Graph *g, int u ,int v){
    g->adjMatrix[u][v] = 1; 
}

void bfs(Graph *g, int start) {
    int visited[MAX_VERTICES] = {0};
    int queue[MAX_VERTICES];
    int front = 0, rear = -1;

    visited[start] = 1;
    queue[++rear] = start;

    printf("BFS traversal starting from vertex %d: ", start);

    while (front <= rear) {
        int node = queue[front++];
        printf("%d ", node);

        for (int i = 0; i < g->vertices; i++) {
            if (g->adjMatrix[node][i] == 1 && !visited[i]) {
                visited[i] = 1;
                queue[++rear] = i;
            }
        }
    }
    printf("\n");
}
void dfsUtil(Graph *g, int node, int visited[]) {
    visited[node] = 1;
    printf("%d ", node);

    for (int i = 0; i < g->vertices; i++) {
        if (g->adjMatrix[node][i] == 1 && !visited[i]) {
            dfsUtil(g, i, visited);
        }
    }
}
void dfs(Graph *g, int start) {
    int visited[MAX_VERTICES] = {0};
    printf("DFS traversal starting from vertex %d: ", start);
    dfsUtil(g, start, visited);
    printf("\n");
}

int main() {
    Graph g;
    initGraph(&g, 5);

    addEdge(&g, 0, 1);
    addEdge(&g, 0, 2);
    addEdge(&g, 1, 2);
    addEdge(&g, 2, 0);
    addEdge(&g, 2, 3);
    addEdge(&g, 3, 3);
    addEdge(&g, 4, 1);

    bfs(&g, 0); 
    dfs(&g, 0); 

    return 0;
}
