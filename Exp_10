#include <stdio.h>
#include<stdlib.h>
typedef struct Node{
    int key;
    struct Node *left;
    struct Node *right;
    int height;
} Node;
int height(Node *N){
    if(N== NULL){
        return 0;
    }
    return N->height;
}
int max(int a,int b){
    return (a>b)?a:b ;
}

Node* newNode(int key){
    Node* node = (Node*)malloc(sizeof(Node));
    node->key = key;
    node->left=NULL;
    node->right=NULL;
    node->height=1;
    return node;
}
Node* rotateRight(Node *y){
    Node* x = y->left;
    Node* T2 = x->right;
    
    y->left=T2;
    x->right=y;
    
    y->height = 1+max(height(y->left),height(y->right));
    x->height = 1+max(height(x->left),height(x->right));
    return x;
}
Node* rotateLeft(Node *x){
    Node* y = x->right;
    Node* T1=y->left;
    
    x->right=T1;
    y->left=x;
    y->height = 1+ max(height(y->left),height(y->right));
    x->height = 1+ max(height(x->left),height(x->right));
    return y;
}
 int getBalance(Node *N){
     if(N== NULL){
         return 0;
     }
     return height(N->left) - height(N->right);
 }

 Node* insert(Node* node , int key){
     if(node==NULL){
         return newNode(key);
     }
     if(key < node->key){
         node->left= insert(node->left,key);
     }else if(key> node->key){
         node->right = insert(node->right,key);
     }else{
         return node;
     }
     node->height= 1+max(height(node->left),height(node->right));
     
     int balance = getBalance(node);
      
      if(balance > 1 && key < node->left->key){
          return rotateRight(node);
      }
      if(balance <-1 && key > node->right->key){
          return rotateLeft(node);
      }
      if(balance > 1 && key< node->left->key){
          node->left= rotateLeft(node->left);
          return rotateRight(node);
      }
      if(balance <-1 && key> node->right->key){
          node->right=rotateRight(node->right);
          return rotateLeft(node);
      }
      return node;
 }
 void inOrder(Node* root){
     if(root!=NULL){
         inOrder(root->left);
         printf("%d ",root->key);
         inOrder(root->right);
     }
 }
 
int main() {
    Node* root = NULL;
    
    root = insert(root,10);
    root = insert(root,20);
    root = insert(root,30);
    root = insert(root,40);
    root = insert(root,150);
    root = insert(root,120);
    root = insert(root,26);
    root = insert(root,15);
    printf("Inorder Traversal of AVL tree is: \n");
    inOrder(root);
    printf("\n");
    return 0;
}

